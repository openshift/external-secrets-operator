apiVersion: apiextensions.k8s.io/v1 # Hack because controller-gen complains if we don't have this
name: "ExternalSecretsConfig"
crdName: externalsecretsconfigs.operator.openshift.io
tests:
  onCreate:
    - name: Should be able to create a minimal ExternalSecretsConfig instance
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec: {} # No spec is required for a ExternalSecretsConfig
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec: {}
    - name: Should be able to create ExternalSecretsConfig with ControllerConfig spec
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            labels:
              "app": "external-secrets"
            periodicReconcileInterval: 600
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            labels:
              "app": "external-secrets"
            periodicReconcileInterval: 600
    - name: Should be able to create ExternalSecretsConfig with ApplicationConfig spec
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            operatingNamespace: "test-namespace"
            logLevel: 3
            webhookConfig:
              certificateCheckInterval: "10m"
          plugins:
            bitwardenSecretManagerProvider:
              mode: Enabled
              secretRef:
                name: "bitwarden-tls-certs"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            operatingNamespace: "test-namespace"
            logLevel: 3
            webhookConfig:
              certificateCheckInterval: "10m"
          plugins:
            bitwardenSecretManagerProvider:
              mode: Enabled
              secretRef:
                name: "bitwarden-tls-certs"
    - name: Should be able to create ExternalSecretsConfig with cert-manager configuration
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Enabled
                issuerRef:
                  name: "letsencrypt-issuer"
                  kind: "ClusterIssuer"
                  group: "cert-manager.io"
                injectAnnotations: "true"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            periodicReconcileInterval: 300
            certProvider:
              certManager:
                mode: Enabled
                issuerRef:
                  name: "letsencrypt-issuer"
                  kind: "ClusterIssuer"
                  group: "cert-manager.io"
                injectAnnotations: "true"
                certificateDuration: "8760h"
                certificateRenewBefore: "30m"
    - name: Should fail to create with invalid singleton name
      resourceName: not-cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec: {}
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"not-cluster\" is invalid: <nil>: Invalid value: \"object\": ExternalSecretsConfig is a singleton, .metadata.name must be 'cluster'"
    - name: Should fail to create cert-manager enabled without issuerRef
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Enabled
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.controllerConfig.certProvider.certManager: Invalid value: \"object\": issuerRef must be provided when mode is set to Enabled."
    - name: Should fail with injectAnnotations without cert-manager enabled
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Disabled
                injectAnnotations: "true"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.controllerConfig.certProvider.certManager: Invalid value: \"object\": injectAnnotations can only be set when mode is set to Enabled."
    - name: Should fail with injectAnnotations true when mode is Disabled explicitly
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Disabled
                injectAnnotations: "true"
                issuerRef:
                  name: "test-issuer"
                  kind: "ClusterIssuer"
                  group: "cert-manager.io"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.controllerConfig.certProvider.certManager: Invalid value: \"object\": injectAnnotations can only be set when mode is set to Enabled."
    - name: Should allow injectAnnotations false when mode is Disabled
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Disabled
                injectAnnotations: "false"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            periodicReconcileInterval: 300
            certProvider:
              certManager:
                mode: Disabled
                injectAnnotations: "false"
                certificateDuration: "8760h"
                certificateRenewBefore: "30m"
    - name: Should allow omitting injectAnnotations when mode is Disabled
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Disabled
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            periodicReconcileInterval: 300
            certProvider:
              certManager:
                mode: Disabled
                certificateDuration: "8760h"
                certificateRenewBefore: "30m"
                injectAnnotations: "false"
    - name: Should fail with invalid issuer kind
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Enabled
                issuerRef:
                  name: "test-issuer"
                  kind: "InvalidKind"
                  group: "cert-manager.io"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.controllerConfig.certProvider.certManager.issuerRef: Invalid value: \"object\": kind must be either 'Issuer' or 'ClusterIssuer'"
    - name: Should fail with invalid issuer group
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Enabled
                issuerRef:
                  name: "test-issuer"
                  kind: "ClusterIssuer"
                  group: "invalid-group"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.controllerConfig.certProvider.certManager.issuerRef: Invalid value: \"object\": group must be 'cert-manager.io'"
    - name: Should fail with operatingNamespace too short
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            operatingNamespace: ""
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.appConfig.operatingNamespace: Invalid value: \"\": spec.appConfig.operatingNamespace in body should be at least 1 chars long"
    - name: Should fail with operatingNamespace too long
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            operatingNamespace: "this-namespace-name-is-way-too-long-and-exceeds-the-maximum-allowed-length-of-sixty-three-characters-total"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: [spec.appConfig.operatingNamespace: Too long: may not be more than 63 bytes, <nil>: Invalid value: \"null\": some validation rules were not checked because the object was invalid; correct the existing errors to complete validation]"
    - name: Should fail with periodicReconcileInterval too low
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            periodicReconcileInterval: 100
      expectedError: "spec.controllerConfig.periodicReconcileInterval: Invalid value: 100: spec.controllerConfig.periodicReconcileInterval in body should be greater than or equal to 120"
    - name: Should fail with periodicReconcileInterval too high
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            periodicReconcileInterval: 20000
      expectedError: "spec.controllerConfig.periodicReconcileInterval: Invalid value: 20000: spec.controllerConfig.periodicReconcileInterval in body should be less than or equal to 18000"
    - name: Should fail with too many controller labels
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            labels:
              "label-key-0": "label-value-0"
              "label-key-1": "label-value-1"
              "label-key-2": "label-value-2"
              "label-key-3": "label-value-3"
              "label-key-4": "label-value-4"
              "label-key-5": "label-value-5"
              "label-key-6": "label-value-6"
              "label-key-7": "label-value-7"
              "label-key-8": "label-value-8"
              "label-key-9": "label-value-9"
              "label-key-10": "label-value-10"
              "label-key-11": "label-value-11"
              "label-key-12": "label-value-12"
              "label-key-13": "label-value-13"
              "label-key-14": "label-value-14"
              "label-key-15": "label-value-15"
              "label-key-16": "label-value-16"
              "label-key-17": "label-value-17"
              "label-key-18": "label-value-18"
              "label-key-19": "label-value-19"
              "label-key-20": "label-value-20"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: [spec.controllerConfig.labels: Too many: 21: must have at most 20 items, <nil>: Invalid value: \"null\": some validation rules were not checked because the object was invalid; correct the existing errors to complete validation]"
    - name: Should fail with issuerRef name too long
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Enabled
                issuerRef:
                  name: "this-issuer-name-is-extremely-long-and-exceeds-the-kubernetes-maximum-name-length-limit-of-two-hundred-fifty-three-characters-which-is-quite-a-lot-of-characters-but-we-need-to-test-this-validation-constraint-properly-to-ensure-it-works-as-expected-in-all-scenarios"
                  kind: "ClusterIssuer"
                  group: "cert-manager.io"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: [spec.controllerConfig.certProvider.certManager.issuerRef.name: Too long: may not be more than 253 bytes, <nil>: Invalid value: \"null\": some validation rules were not checked because the object was invalid; correct the existing errors to complete validation]"
    - name: Should fail with issuerRef name empty (required field)
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Enabled
                issuerRef:
                  name: ""
                  kind: "ClusterIssuer"
                  group: "cert-manager.io"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.controllerConfig.certProvider.certManager.issuerRef.name: Invalid value: \"\": spec.controllerConfig.certProvider.certManager.issuerRef.name in body should be at least 1 chars long"
    - name: Should fail with issuerRef kind too long
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Enabled
                issuerRef:
                  name: "test-issuer"
                  kind: "this-kind-name-is-extremely-long-and-exceeds-the-kubernetes-maximum-name-length-limit-of-two-hundred-fifty-three-characters-which-is-quite-a-lot-of-characters-but-we-need-to-test-this-validation-constraint-properly-to-ensure-it-works-as-expected-in-all-scenarios"
                  group: "cert-manager.io"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: [spec.controllerConfig.certProvider.certManager.issuerRef.kind: Too long: may not be more than 253 bytes, <nil>: Invalid value: \"null\": some validation rules were not checked because the object was invalid; correct the existing errors to complete validation]"
    - name: Should fail with issuerRef group too long
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Enabled
                issuerRef:
                  name: "test-issuer"
                  kind: "ClusterIssuer"
                  group: "this-group-name-is-extremely-long-and-exceeds-the-kubernetes-maximum-name-length-limit-of-two-hundred-fifty-three-characters-which-is-quite-a-lot-of-characters-but-we-need-to-test-this-validation-constraint-properly-to-ensure-it-works-as-expected-in-all-scenarios"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: [spec.controllerConfig.certProvider.certManager.issuerRef.group: Too long: may not be more than 253 bytes, <nil>: Invalid value: \"null\": some validation rules were not checked because the object was invalid; correct the existing errors to complete validation]"
    - name: Should fail with bitwarden secretRef name empty (required field)
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          plugins:
            bitwardenSecretManagerProvider:
              mode: Enabled
              secretRef:
                name: ""
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.plugins.bitwardenSecretManagerProvider.secretRef.name: Invalid value: \"\": spec.plugins.bitwardenSecretManagerProvider.secretRef.name in body should be at least 1 chars long"
    - name: Should fail with bitwarden secretRef name too long
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          plugins:
            bitwardenSecretManagerProvider:
              mode: Enabled
              secretRef:
                name: "this-secret-name-is-extremely-long-and-exceeds-the-kubernetes-maximum-name-length-limit-of-two-hundred-fifty-three-characters-which-is-quite-a-lot-of-characters-but-we-need-to-test-this-validation-constraint-properly-to-ensure-it-works-as-expected-in-all-scenarios"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: [spec.plugins.bitwardenSecretManagerProvider.secretRef.name: Too long: may not be more than 253 bytes, <nil>: Invalid value: \"null\": some validation rules were not checked because the object was invalid; correct the existing errors to complete validation]"
    - name: Should fail with invalid log level too low
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            logLevel: 0
      expectedError: "spec.appConfig.logLevel: Invalid value: 0: spec.appConfig.logLevel in body should be greater than or equal to 1"
    - name: Should fail with invalid log level too high
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            logLevel: 10
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.appConfig.logLevel: Invalid value: 10: spec.appConfig.logLevel in body should be less than or equal to 5"
    - name: Should fail with bitwarden enabled but no secretRef or cert-manager
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          plugins:
            bitwardenSecretManagerProvider:
              mode: Enabled
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec: Invalid value: \"object\": secretRef or certManager must be configured when bitwardenSecretManagerProvider plugin is enabled"
    - name: Should fail with bitwarden enabled and cert-manager disabled without secretRef
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          plugins:
            bitwardenSecretManagerProvider:
              mode: Enabled
          controllerConfig:
            certProvider:
              certManager:
                mode: Disabled
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec: Invalid value: \"object\": secretRef or certManager must be configured when bitwardenSecretManagerProvider plugin is enabled"
    - name: Should allow bitwarden enabled with both secretRef and cert-manager enabled
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          plugins:
            bitwardenSecretManagerProvider:
              mode: Enabled
              secretRef:
                name: "bitwarden-tls-certs"
          controllerConfig:
            certProvider:
              certManager:
                mode: Enabled
                injectAnnotations: "false"
                issuerRef:
                  name: "letsencrypt-issuer"
                  kind: "ClusterIssuer"
                  group: "cert-manager.io"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          plugins:
            bitwardenSecretManagerProvider:
              mode: Enabled
              secretRef:
                name: "bitwarden-tls-certs"
          controllerConfig:
            periodicReconcileInterval: 300
            certProvider:
              certManager:
                mode: Enabled
                injectAnnotations: "false"
                issuerRef:
                  name: "letsencrypt-issuer"
                  kind: "ClusterIssuer"
                  group: "cert-manager.io"
                certificateDuration: "8760h"
                certificateRenewBefore: "30m"
    - name: Should allow bitwarden enabled with cert-manager enabled but no secretRef
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          plugins:
            bitwardenSecretManagerProvider:
              mode: Enabled
          controllerConfig:
            certProvider:
              certManager:
                mode: Enabled
                injectAnnotations: "false"
                issuerRef:
                  name: "letsencrypt-issuer"
                  kind: "ClusterIssuer"
                  group: "cert-manager.io"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          plugins:
            bitwardenSecretManagerProvider:
              mode: Enabled
          controllerConfig:
            periodicReconcileInterval: 300
            certProvider:
              certManager:
                mode: Enabled
                injectAnnotations: "false"
                issuerRef:
                  name: "letsencrypt-issuer"
                  kind: "ClusterIssuer"
                  group: "cert-manager.io"
                certificateDuration: "8760h"
                certificateRenewBefore: "30m"
    - name: Should allow bitwarden disabled without secretRef or cert-manager
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          plugins:
            bitwardenSecretManagerProvider:
              mode: Disabled
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          plugins:
            bitwardenSecretManagerProvider:
              mode: Disabled
    - name: Should allow valid periodicReconcileInterval values
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            periodicReconcileInterval: 1800
            labels:
              "environment": "test"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            periodicReconcileInterval: 1800
            labels:
              "environment": "test"
    - name: Should allow webhookConfig with custom certificateCheckInterval
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            webhookConfig:
              certificateCheckInterval: "15m"
            operatingNamespace: "test-ns"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            logLevel: 1
            webhookConfig:
              certificateCheckInterval: "15m"
            operatingNamespace: "test-ns"
    - name: Should allow minimal controllerConfig with just periodicReconcileInterval
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            periodicReconcileInterval: 120
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            periodicReconcileInterval: 120
  onUpdate:
    - name: Should be able to update labels in controller config
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            labels:
              "app": "external-secrets"
      updated: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            labels:
              "app": "external-secrets"
              "version": "v1.0.0"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            periodicReconcileInterval: 300
            labels:
              "app": "external-secrets"
              "version": "v1.0.0"
    - name: Should not be able to change cert-manager enabled after creation
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Disabled
      updated: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Enabled
                issuerRef:
                  name: "letsencrypt-issuer"
                  kind: "ClusterIssuer"
                  group: "cert-manager.io"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.controllerConfig.certProvider.certManager.mode: Invalid value: \"string\": mode is immutable once set"
    - name: Should not be able to change issuerRef after creation
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Enabled
                issuerRef:
                  name: "old-issuer"
                  kind: "ClusterIssuer"
                  group: "cert-manager.io"
      updated: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            certProvider:
              certManager:
                mode: Enabled
                issuerRef:
                  name: "new-issuer"
                  kind: "ClusterIssuer"
                  group: "cert-manager.io"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.controllerConfig.certProvider.certManager.issuerRef: Invalid value: \"object\": issuerRef is immutable once set"
    - name: Should be able to update periodicReconcileInterval
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            periodicReconcileInterval: 300
            labels:
              "env": "dev"
      updated: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            periodicReconcileInterval: 600
            labels:
              "env": "dev"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            periodicReconcileInterval: 600
            labels:
              "env": "dev"
    - name: Should be able to add bitwarden provider after creation
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig: {}
      updated: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig: {}
          plugins:
            bitwardenSecretManagerProvider:
              mode: Enabled
              secretRef:
                name: "bitwarden-certs"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            logLevel: 1
          plugins:
            bitwardenSecretManagerProvider:
              mode: Enabled
              secretRef:
                name: "bitwarden-certs"